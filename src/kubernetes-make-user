#!/usr/bin/env python3

import argparse
import functools
import logging
import os
import subprocess
import tempfile

class L(object):
    def __init__(self, fmt, *args, **kwargs):
        self.fmt = fmt
        self.args = args
        self.kwargs = kwargs

    def __str__(self):
        return self.fmt.format(*self.args, **self.kwargs)

def main():
    user, groups, ca_key, ca_crt, key_file, crt_file, days = parse_arguments_and_init_logging()
    generate_user_key(user, key_file, 2048)
    config_file = generate_openssl_req_config_file()
    request_file = generate_cert_request(user, groups, key_file, config_file)
    sign_cert_request(request_file, ca_key, ca_crt, days, crt_file, config_file)
    logging.info(L('User "{}" should now try --client-certificate={} and --client-key={} ' +
                   'in their "kubectl config set-crendentials" command line.', user, crt_file, key_file))

def generate_user_key(user, key_file, key_length):
    if os.path.isfile(key_file) and 0 < os.stat(key_file).st_size:
        raise RuntimeError('ERROR: File "{}" already exists and has data, don\'t dare to overwrite.'.format(key_file))
    result = run(["openssl", "genrsa",  "-out", key_file, '{}'.format(key_length)])

def generate_cert_request(user, groups, key_file, config_file):
    if not os.path.isfile(key_file):
        raise RuntimeError('ERROR: File "{}" should have been generated by now, but wasn\'t.'.format(key_file))
    if not 0 < os.stat(key_file).st_size:
        raise RuntimeError('ERROR: File "{}" generated empty. That won\'t work.'.format(key_file))
    fd, csr_file = tempfile.mkstemp(suffix = '.csr', prefix = '{}_'.format(user))
    os.close(fd)
    subj = "/CN={}{}".format(user, functools.reduce(lambda s, g: "{}/O={}".format(s, g), iter(groups), ""))
    run(['openssl', 'req', '-new', '-config', config_file, '-key', key_file, '-subj', subj, \
         '-out', csr_file, '-subject', '-utf8', '-batch', '-verbose', '-text'])
    return csr_file

def generate_openssl_req_config_file():
    with tempfile.NamedTemporaryFile(encoding='UTF-8', mode='w', suffix='.conf', prefix='careq_', delete=False) as cfile:
        cfile.write("""
[ req ]
default_md         = sha256
string_mask        = utf8only
prompt             = no
utf8               = yes
distinguished_name = dnsection

[ dnsection ]

[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=clientAuth
""")
        logging.info('Config file for openssl req generated at "{}".'.format(cfile.name))
        return cfile.name
    
def sign_cert_request(request_file, ca_key, ca_crt, days, crt_file, config_file):
    if os.path.isfile(crt_file) and 0 < os.stat(crt_file).st_size:
        raise RuntimeError('ERROR: File "{}" already exists and has data, don\'t dare to overwrite.'.format(crt_file))

    if not os.path.isfile(ca_crt):
        raise RuntimeError('ERROR: Cluster certificate authority\'s (self-signed) certificate "{}" not found.'.format(ca_crt))

    if not os.path.isfile(ca_key):
        raise RuntimeError('ERROR: Cluster certificate authority\'s private key file "{}" not found.'.format(ca_key))

    if not os.path.isfile(config_file):
        raise RuntimeError('ERROR: Openssl config file "{}" not found.'.format(config_file))

    run(['openssl', 'x509', '-req', '-in', request_file, '-CA', ca_crt, '-CAcreateserial', '-CAkey', ca_key, '-out', crt_file, \
         '-days', "{}".format(days), '-extensions', 'v3_ext', '-extfile', config_file])

def run(cmd):
    logging.info(L("Attempting to start: {}", cmd))
    subprocess.run(cmd, check = True)
    logging.info(L("Execution succeeded: {}", cmd))

def parse_arguments_and_init_logging():
    
    parser = argparse.ArgumentParser(description='A utility to setup up a kops user, the certificate way.')
    parser.add_argument('-u', '--user',
                        help='The user to create.', required=True)
    parser.add_argument('-g', '--group', action='append',
                        help='A group to which to add the user. May be omitted or repeated.')
    parser.add_argument('-d', '--days', type=int, default=70,
                        help='Certificate validity (default 70).')
    parser.add_argument('--ca-private-key', default='ca.key',
                        help = 'Cluster\'s CA private key file (default ca.key).')
    parser.add_argument('--ca-cert', default='ca.crt',
                        help = 'Cluster\'s CA public certificate file (default ca.crt), usually self-signed.')
    parser.add_argument('--out-key',
                        help='User\'s new key file. Defaults to <user>.key.')
    parser.add_argument('--out-crt',
                        help='Certificate file for the user. Defaults to <user>.crt')
    parser.add_argument('--loglevel', choices=['debug', 'info', 'warn', 'error'],
                        default = 'info', help='Log level (default info).')
    
    arguments = parser.parse_args()
    
    logging.basicConfig(format='%(asctime)s %(levelname)-7s %(message)s',
                        level=getattr(logging, arguments.loglevel.upper(), logging.INFO))
    
    user    = arguments.user
    groups  = arguments.group if arguments.group else []
    ca_key  = arguments.ca_private_key
    ca_crt  = arguments.ca_cert
    key_file = arguments.out_key if arguments.out_key else "{}.key".format(user)
    crt_file = arguments.out_crt if arguments.out_crt else "{}.crt".format(user)
    days = arguments.days
    
    logging.debug(L('User:                 {}', user))
    logging.debug(L('Groups:               {}', groups))
    logging.debug(L('CA key:               {}', ca_key))
    logging.debug(L('CA crt:               {}', ca_crt))
    logging.debug(L('Key file:             {}', key_file))
    logging.debug(L('Certificate file:     {}', crt_file))
    logging.debug(L('Certificate validity: {} days', days))
    
    return [user, groups, ca_key, ca_crt, key_file, crt_file, days]


if __name__ == '__main__':
    main()
